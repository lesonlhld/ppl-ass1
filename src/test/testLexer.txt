import unittest
from TestUtils import TestLexer

class LexerSuite(unittest.TestCase):
    def test_1(self):
        """Created automatically"""
        input = """20.e5 18.E9 9.e+3 33.e-3 0.e """ 
        output = """20.e5,18.E9,9.e+3,33.e-3,0.,e,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,1))
    def test_2(self):
        """Created automatically"""
        input = """0.0 52.. 43124. 120000e-1""" 
        output = """0.0,52.,.,43124.,120000e-1,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,2))
    def test_3(self):
        """Created automatically"""
        input = """0.4254 654.321 .7582 87867. .""" 
        output = """0.4254,654.321,.,7582,87867.,.,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,3))
    def test_4(self):
        """Created automatically"""
        input = """4.e.6 -0 -404 -.e3 -10.e -10.e3""" 
        output = """4.,e,.,6,-,0,-,404,-.,e3,-,10.,e,-,10.e3,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,4))
    def test_5(self):
        """Created automatically"""
        input = """e97 E-66 16e 30E4 12.0e3""" 
        output = """e97,Error Token E"""
        self.assertTrue(TestLexer.checkLexeme(input,output,5))
    def test_6(self):
        """Created automatically"""
        input = """abc""" 
        output = """abc,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,6))
    def test_7(self):
        """Created automatically"""
        input = """tu1 1a` le^ trun9 son!!!""" 
        output = """tu1,1,a,Error Token `"""
        self.assertTrue(TestLexer.checkLexeme(input,output,7))
    def test_8(self):
        """Created automatically"""
        input = """Var""" 
        output = """Var,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,8))
    def test_9(self):
        """Created automatically"""
        input = """day la 1 test""" 
        output = """day,la,1,test,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,9))
    def test_10(self):
        """Created automatically"""
        input = """xin chao cac ban""" 
        output = """xin,chao,cac,ban,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,10))
    def test_11(self):
        """Created automatically"""
        input = """co so dau tien 108NVH""" 
        output = """co,so,dau,tien,108,Error Token N"""
        self.assertTrue(TestLexer.checkLexeme(input,output,11))
    def test_12(self):
        """Created automatically"""
        input = """viet hoa IDENTIFIERS""" 
        output = """viet,hoa,Error Token I"""
        self.assertTrue(TestLexer.checkLexeme(input,output,12))
    def test_13(self):
        """Created automatically"""
        input = """vIet Lon XOn nE""" 
        output = """vIet,Error Token L"""
        self.assertTrue(TestLexer.checkLexeme(input,output,13))
    def test_14(self):
        """Created automatically"""
        input = """co ky tu dac biet @@""" 
        output = """co,ky,tu,dac,biet,Error Token @"""
        self.assertTrue(TestLexer.checkLexeme(input,output,14))
    def test_15(self):
        """Created automatically"""
        input = """Var: x""" 
        output = """Var,:,x,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,15))
    def test_16(self):
        """Created automatically"""
        input = """ "abc\\h def"  """ 
        output = """Illegal Escape In String: abc\\h"""
        self.assertTrue(TestLexer.checkLexeme(input,output,16))
    def test_17(self):
        """Created automatically"""
        input = """ "ngoi TAo \\\\tESt eScapE '" ne ' \\r" """ 
        output = """Illegal Escape In String: ngoi TAo \\\\tESt eScapE '" ne ' """
        self.assertTrue(TestLexer.checkLexeme(input,output,17))
    def test_18(self):
        """Created automatically"""
        input = """ "hello\\'\\myfriend" """ 
        output = """Illegal Escape In String: hello\\'\\m"""
        self.assertTrue(TestLexer.checkLexeme(input,output,18))
    def test_19(self):
        """Created automatically"""
        input = """ "chao cac ban nhaaa \\Hom\\nay cac ban the nao" """ 
        output = """Illegal Escape In String: chao cac ban nhaaa \\H"""
        self.assertTrue(TestLexer.checkLexeme(input,output,19))
    def test_20(self):
        """Created automatically"""
        input = """ "24 naif ^%$^% cdasjh\\Fncueyew" """ 
        output = """Illegal Escape In String: 24 naif ^%$^% cdasjh\\F"""
        self.assertTrue(TestLexer.checkLexeme(input,output,20))
    def test_21(self):
        """Created automatically"""
        input = """ "To la Chung Xon \\Ne" """ 
        output = """Illegal Escape In String: To la Chung Xon \\N"""
        self.assertTrue(TestLexer.checkLexeme(input,output,21))
    def test_22(self):
        """Created automatically"""
        input = """ xin chao "phan thanh truong\\haha" 456""" 
        output = """xin,chao,Illegal Escape In String: phan thanh truong\\h"""
        self.assertTrue(TestLexer.checkLexeme(input,output,22))
    def test_23(self):
        """Created automatically"""
        input = """ "ahihi do ngoc\\\\" """ 
        output = """ahihi do ngoc\\\\,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,23))
    def test_24(self):
        """Created automatically"""
        input = """ "Day la ' illegal" """ 
        output = """Illegal Escape In String: Day la ' """
        self.assertTrue(TestLexer.checkLexeme(input,output,24))
    def test_25(self):
        """Created automatically"""
        input = """ "Test met qua troi \\Wa dat luon ne""" 
        output = """Illegal Escape In String: Test met qua troi \\W"""
        self.assertTrue(TestLexer.checkLexeme(input,output,25))
    def test_26(self):
        """Created automatically"""
        input = """0X54J54""" 
        output = """0X54,Error Token J"""
        self.assertTrue(TestLexer.checkLexeme(input,output,26))
    def test_27(self):
        """Created automatically"""
        input = """0X5456A 0x205F 0XBCD 0X0 0X567 0x2""" 
        output = """0X5456A,0x205F,0XBCD,0,Error Token X"""
        self.assertTrue(TestLexer.checkLexeme(input,output,27))
    def test_28(self):
        """Created automatically"""
        input = """01 8 0108 2000 000""" 
        output = """0,1,8,0,108,2000,0,0,0,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,28))
    def test_29(self):
        """Created automatically"""
        input = """0O0 0o1 0o413215""" 
        output = """0,Error Token O"""
        self.assertTrue(TestLexer.checkLexeme(input,output,29))
    def test_30(self):
        """Created automatically"""
        input = """0B2005""" 
        output = """0,Error Token B"""
        self.assertTrue(TestLexer.checkLexeme(input,output,30))
    def test_31(self):
        """Created automatically"""
        input = """abc For 12 BreaK Continue dot""" 
        output = """abc,For,12,Error Token B"""
        self.assertTrue(TestLexer.checkLexeme(input,output,31))
    def test_32(self):
        """Created automatically"""
        input = """EndDoEndForWhWhileileWhileWhile""" 
        output = """EndDo,EndFor,Error Token W"""
        self.assertTrue(TestLexer.checkLexeme(input,output,32))
    def test_33(self):
        """Created automatically"""
        input = """if thEn ElSE Then """ 
        output = """if,thEn,Error Token E"""
        self.assertTrue(TestLexer.checkLexeme(input,output,33))
    def test_34(self):
        """Created automatically"""
        input = """Varr VaR""" 
        output = """Var,r,Error Token V"""
        self.assertTrue(TestLexer.checkLexeme(input,output,34))
    def test_35(self):
        """Created automatically"""
        input = """Parameter: x""" 
        output = """Parameter,:,x,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,35))
    def test_36(self):
        """Created automatically"""
        input = """BODY int 1.12INTEGER 12and""" 
        output = """Error Token B"""
        self.assertTrue(TestLexer.checkLexeme(input,output,36))
    def test_37(self):
        """Created automatically"""
        input = """oR diVModNTEGER Mod nottrEu""" 
        output = """oR,diVModNTEGER,Error Token M"""
        self.assertTrue(TestLexer.checkLexeme(input,output,37))
    def test_38(self):
        """Created automatically"""
        input = """If then else false""" 
        output = """If,then,else,false,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,38))
    def test_39(self):
        """Created automatically"""
        input = """anD then false""" 
        output = """anD,then,false,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,39))
    def test_40(self):
        """Created automatically"""
        input = """sTRIng False""" 
        output = """sTRIng,False,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,40))
    def test_41(self):
        """Created automatically"""
        input = """ "Day la 1 string nha Dang Huynh Minh Tri"  """ 
        output = """Day la 1 string nha Dang Huynh Minh Tri,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,41))
    def test_42(self):
        """Created automatically"""
        input = """ "\\b\\f\\r\\n\\t\\'\\\\"  """ 
        output = """\\b\\f\\r\\n\\t\\'\\\\,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,42))
    def test_43(self):
        """Created automatically"""
        input = """ "This is a string containing tab \\t"  """ 
        output = """This is a string containing tab \\t,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,43))
    def test_44(self):
        """Created automatically"""
        input = """ "He asked me: '"Where is John?'""  """ 
        output = """He asked me: '"Where is John?'",<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,44))
    def test_45(self):
        """Created automatically"""
        input = """ "String nay chua cac ky tu dac biet !@#$%^^&*()?/|~!%>:P{}<> :)))"  """ 
        output = """String nay chua cac ky tu dac biet !@#$%^^&*()?/|~!%>:P{}<> :))),<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,45))
    def test_46(self):
        """Created automatically"""
        input = """ "ab'"c\\n def"  """ 
        output = """ab'"c\\n def,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,46))
    def test_47(self):
        """Created automatically"""
        input = """ "Sau day la 1 string rong" ""  """ 
        output = """Sau day la 1 string rong,,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,47))
    def test_48(self):
        """Created automatically"""
        input = """ "bool_of_string ('"True'")"  """ 
        output = """bool_of_string ('"True'"),<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,48))
    def test_49(self):
        """Created automatically"""
        input = """ "** cai nay hong phai comment nha **"  """ 
        output = """** cai nay hong phai comment nha **,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,49))
    def test_50(self):
        """Created automatically"""
        input = """" This is a test 0925919727 \\' PHONE" abc 
"YKYUUD '" \\f fsgre " """ 
        output = """ This is a test 0925919727 \\' PHONE,abc,YKYUUD '" \\f fsgre ,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,50))
    def test_51(self):
        """Created automatically"""
        input = """truong_555!""" 
        output = """truong_555,!,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,51))
    def test_52(self):
        """Created automatically"""
        input = """0123p""" 
        output = """0,123,p,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,52))
    def test_53(self):
        """Created automatically"""
        input = """0000000""" 
        output = """0,0,0,0,0,0,0,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,53))
    def test_54(self):
        """Created automatically"""
        input = """**truong**""" 
        output = """<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,54))
    def test_55(self):
        """Created automatically"""
        input = """** truong **""" 
        output = """<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,55))
    def test_56(self):
        """Created automatically"""
        input = """ "phan thanh truong" """ 
        output = """phan thanh truong,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,56))
    def test_57(self):
        """Created automatically"""
        input = """ "abc def  """ 
        output = """Unclosed String: abc def  """
        self.assertTrue(TestLexer.checkLexeme(input,output,57))
    def test_58(self):
        """Created automatically"""
        input = """"fe23%$.81r " {"abc"} 123"abc""" 
        output = """fe23%$.81r ,{"abc"},123,Unclosed String: abc"""
        self.assertTrue(TestLexer.checkLexeme(input,output,58))
    def test_59(self):
        """Created automatically"""
        input = """ "Hi Chau Thanh""Tan """ 
        output = """Hi Chau Thanh,Unclosed String: Tan """
        self.assertTrue(TestLexer.checkLexeme(input,output,59))
    def test_60(self):
        """Created automatically"""
        input = """ "vi su nghiep qua PPL \\n" """ 
        output = """vi su nghiep qua PPL \\n,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,60))
    def test_61(self):
        """Created automatically"""
        input = """ "String ket thuc bang EOF" """ 
        output = """String ket thuc bang EOF,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,61))
    def test_62(self):
        """Created automatically"""
        input = """ "abc\\n """ 
        output = """Unclosed String: abc\\n """
        self.assertTrue(TestLexer.checkLexeme(input,output,62))
    def test_63(self):
        """Created automatically"""
        input = """ "khok '" 1" "dong song~~~ EOF""" 
        output = """khok '" 1,Unclosed String: dong song~~~ EOF"""
        self.assertTrue(TestLexer.checkLexeme(input,output,63))
    def test_64(self):
        """Created automatically"""
        input = """ "" " """ 
        output = """,Unclosed String:  """
        self.assertTrue(TestLexer.checkLexeme(input,output,64))
    def test_65(self):
        """Created automatically"""
        input = """Function: assignment Body: str = "Hello World!!! Endbody.""" 
        output = """Function,:,assignment,Body,:,str,=,Unclosed String: Hello World!!! Endbody."""
        self.assertTrue(TestLexer.checkLexeme(input,output,65))
    def test_66(self):
        """Created automatically"""
        input = """ "8n[#F*`~.~+C_D""" 
        output = """Unclosed String: 8n[#F*`~.~+C_D"""
        self.assertTrue(TestLexer.checkLexeme(input,output,66))import unittest
from TestUtils import TestLexer

class LexerSuite(unittest.TestCase):
    def test_1(self):
        """Created automatically"""
        input = """20.e5 18.E9 9.e+3 33.e-3 0.e """ 
        output = """20.e5,18.E9,9.e+3,33.e-3,0.,e,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,1))
    def test_2(self):
        """Created automatically"""
        input = """xin chao cac ban""" 
        output = """xin,chao,cac,ban,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,2))
    def test_3(self):
        """Created automatically"""
        input = """co so dau tien 108NVH""" 
        output = """co,so,dau,tien,108,Error Token N"""
        self.assertTrue(TestLexer.checkLexeme(input,output,3))
    def test_4(self):
        """Created automatically"""
        input = """viet hoa IDENTIFIERS""" 
        output = """viet,hoa,Error Token I"""
        self.assertTrue(TestLexer.checkLexeme(input,output,4))
    def test_5(self):
        """Created automatically"""
        input = """vIet Lon XOn nE""" 
        output = """vIet,Error Token L"""
        self.assertTrue(TestLexer.checkLexeme(input,output,5))
    def test_6(self):
        """Created automatically"""
        input = """co ky tu dac biet @@""" 
        output = """co,ky,tu,dac,biet,Error Token @"""
        self.assertTrue(TestLexer.checkLexeme(input,output,6))
    def test_7(self):
        """Created automatically"""
        input = """Var: x""" 
        output = """Var,:,x,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,7))
    def test_8(self):
        """Created automatically"""
        input = """ "abc\h def"  """ 
        output = """Illegal Escape In String: abc\h"""
        self.assertTrue(TestLexer.checkLexeme(input,output,8))
    def test_9(self):
        """Created automatically"""
        input = """ "ngoi TAo \\tESt eScapE '" ne ' \r" """ 
        output = """Illegal Escape In String: ngoi TAo \\tESt eScapE '" ne ' """
        self.assertTrue(TestLexer.checkLexeme(input,output,9))
    def test_10(self):
        """Created automatically"""
        input = """ "hello\'\myfriend" """ 
        output = """Illegal Escape In String: hello\'\m"""
        self.assertTrue(TestLexer.checkLexeme(input,output,10))
    def test_11(self):
        """Created automatically"""
        input = """ "chao cac ban nhaaa \Hom\nay cac ban the nao" """ 
        output = """Illegal Escape In String: chao cac ban nhaaa \H"""
        self.assertTrue(TestLexer.checkLexeme(input,output,11))
    def test_12(self):
        """Created automatically"""
        input = """0.0 52.. 43124. 120000e-1""" 
        output = """0.0,52.,.,43124.,120000e-1,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,12))
    def test_13(self):
        """Created automatically"""
        input = """ "24 naif ^%$^% cdasjh\Fncueyew" """ 
        output = """Illegal Escape In String: 24 naif ^%$^% cdasjh\F"""
        self.assertTrue(TestLexer.checkLexeme(input,output,13))
    def test_14(self):
        """Created automatically"""
        input = """ "To la Chung Xon \Ne" """ 
        output = """Illegal Escape In String: To la Chung Xon \N"""
        self.assertTrue(TestLexer.checkLexeme(input,output,14))
    def test_15(self):
        """Created automatically"""
        input = """ xin chao "phan thanh truong\haha" 456""" 
        output = """xin,chao,Illegal Escape In String: phan thanh truong\h"""
        self.assertTrue(TestLexer.checkLexeme(input,output,15))
    def test_16(self):
        """Created automatically"""
        input = """ "ahihi do ngoc\\" """ 
        output = """ahihi do ngoc\\,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,16))
    def test_17(self):
        """Created automatically"""
        input = """ "Day la ' illegal" """ 
        output = """Illegal Escape In String: Day la ' """
        self.assertTrue(TestLexer.checkLexeme(input,output,17))
    def test_18(self):
        """Created automatically"""
        input = """ "Test met qua troi \Wa dat luon ne""" 
        output = """Illegal Escape In String: Test met qua troi \W"""
        self.assertTrue(TestLexer.checkLexeme(input,output,18))
    def test_19(self):
        """Created automatically"""
        input = """0X54J54""" 
        output = """0X54,Error Token J"""
        self.assertTrue(TestLexer.checkLexeme(input,output,19))
    def test_20(self):
        """Created automatically"""
        input = """0X5456A 0x205F 0XBCD 0X0 0X567 0x2""" 
        output = """0X5456A,0x205F,0XBCD,0,Error Token X"""
        self.assertTrue(TestLexer.checkLexeme(input,output,20))
    def test_21(self):
        """Created automatically"""
        input = """01 8 0108 2000 000""" 
        output = """0,1,8,0,108,2000,0,0,0,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,21))
    def test_22(self):
        """Created automatically"""
        input = """0O0 0o1 0o413215""" 
        output = """0,Error Token O"""
        self.assertTrue(TestLexer.checkLexeme(input,output,22))
    def test_23(self):
        """Created automatically"""
        input = """0.4254 654.321 .7582 87867. .""" 
        output = """0.4254,654.321,.,7582,87867.,.,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,23))
    def test_24(self):
        """Created automatically"""
        input = """0B2005""" 
        output = """0,Error Token B"""
        self.assertTrue(TestLexer.checkLexeme(input,output,24))
    def test_25(self):
        """Created automatically"""
        input = """abc For 12 BreaK Continue dot""" 
        output = """abc,For,12,Error Token B"""
        self.assertTrue(TestLexer.checkLexeme(input,output,25))
    def test_26(self):
        """Created automatically"""
        input = """EndDoEndForWhWhileileWhileWhile""" 
        output = """EndDo,EndFor,Error Token W"""
        self.assertTrue(TestLexer.checkLexeme(input,output,26))
    def test_27(self):
        """Created automatically"""
        input = """if thEn ElSE Then """ 
        output = """if,thEn,Error Token E"""
        self.assertTrue(TestLexer.checkLexeme(input,output,27))
    def test_28(self):
        """Created automatically"""
        input = """Varr VaR""" 
        output = """Var,r,Error Token V"""
        self.assertTrue(TestLexer.checkLexeme(input,output,28))
    def test_29(self):
        """Created automatically"""
        input = """Parameter: x""" 
        output = """Parameter,:,x,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,29))
    def test_30(self):
        """Created automatically"""
        input = """BODY int 1.12INTEGER 12and""" 
        output = """Error Token B"""
        self.assertTrue(TestLexer.checkLexeme(input,output,30))
    def test_31(self):
        """Created automatically"""
        input = """oR diVModNTEGER Mod nottrEu""" 
        output = """oR,diVModNTEGER,Error Token M"""
        self.assertTrue(TestLexer.checkLexeme(input,output,31))
    def test_32(self):
        """Created automatically"""
        input = """If then else false""" 
        output = """If,then,else,false,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,32))
    def test_33(self):
        """Created automatically"""
        input = """anD then false""" 
        output = """anD,then,false,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,33))
    def test_34(self):
        """Created automatically"""
        input = """4.e.6 -0 -404 -.e3 -10.e -10.e3""" 
        output = """4.,e,.,6,-,0,-,404,-.,e3,-,10.,e,-,10.e3,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,34))
    def test_35(self):
        """Created automatically"""
        input = """sTRIng False""" 
        output = """sTRIng,False,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,35))
    def test_36(self):
        """Created automatically"""
        input = """ "Day la 1 string nha Dang Huynh Minh Tri"  """ 
        output = """Day la 1 string nha Dang Huynh Minh Tri,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,36))
    def test_37(self):
        """Created automatically"""
        input = """ "\b\f\r\n\t\'\\"  """ 
        output = """\b\f\r\n\t\'\\,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,37))
    def test_38(self):
        """Created automatically"""
        input = """ "This is a string containing tab \t"  """ 
        output = """This is a string containing tab \t,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,38))
    def test_39(self):
        """Created automatically"""
        input = """ "He asked me: '"Where is John?'""  """ 
        output = """He asked me: '"Where is John?'",<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,39))
    def test_40(self):
        """Created automatically"""
        input = """ "String nay chua cac ky tu dac biet !@#$%^^&*()?/|~!%>:P{}<> :)))"  """ 
        output = """String nay chua cac ky tu dac biet !@#$%^^&*()?/|~!%>:P{}<> :))),<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,40))
    def test_41(self):
        """Created automatically"""
        input = """ "ab'"c\n def"  """ 
        output = """ab'"c\n def,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,41))
    def test_42(self):
        """Created automatically"""
        input = """ "Sau day la 1 string rong" ""  """ 
        output = """Sau day la 1 string rong,,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,42))
    def test_43(self):
        """Created automatically"""
        input = """ "bool_of_string ('"True'")"  """ 
        output = """bool_of_string ('"True'"),<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,43))
    def test_44(self):
        """Created automatically"""
        input = """ "** cai nay hong phai comment nha **"  """ 
        output = """** cai nay hong phai comment nha **,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,44))
    def test_45(self):
        """Created automatically"""
        input = """e97 E-66 16e 30E4 12.0e3""" 
        output = """e97,Error Token E"""
        self.assertTrue(TestLexer.checkLexeme(input,output,45))
    def test_46(self):
        """Created automatically"""
        input = """" This is a test 0925919727 \' PHONE" abc 
"YKYUUD '" \f fsgre " """ 
        output = """ This is a test 0925919727 \' PHONE,abc,YKYUUD '" \f fsgre ,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,46))
    def test_47(self):
        """Created automatically"""
        input = """truong_555!""" 
        output = """truong_555,!,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,47))
    def test_48(self):
        """Created automatically"""
        input = """0123p""" 
        output = """0,123,p,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,48))
    def test_49(self):
        """Created automatically"""
        input = """0000000""" 
        output = """0,0,0,0,0,0,0,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,49))
    def test_50(self):
        """Created automatically"""
        input = """**truong**""" 
        output = """<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,50))
    def test_51(self):
        """Created automatically"""
        input = """** truong **""" 
        output = """<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,51))
    def test_52(self):
        """Created automatically"""
        input = """ "phan thanh truong" """ 
        output = """phan thanh truong,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,52))
    def test_53(self):
        """Created automatically"""
        input = """ "abc def  """ 
        output = """Unclosed String: abc def  """
        self.assertTrue(TestLexer.checkLexeme(input,output,53))
    def test_54(self):
        """Created automatically"""
        input = """"fe23%$.81r " {"abc"} 123"abc""" 
        output = """fe23%$.81r ,{"abc"},123,Unclosed String: abc"""
        self.assertTrue(TestLexer.checkLexeme(input,output,54))
    def test_55(self):
        """Created automatically"""
        input = """ "Hi Chau Thanh""Tan """ 
        output = """Hi Chau Thanh,Unclosed String: Tan """
        self.assertTrue(TestLexer.checkLexeme(input,output,55))
    def test_56(self):
        """Created automatically"""
        input = """abc""" 
        output = """abc,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,56))
    def test_57(self):
        """Created automatically"""
        input = """ "vi su nghiep qua PPL \n" """ 
        output = """vi su nghiep qua PPL \n,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,57))
    def test_58(self):
        """Created automatically"""
        input = """ "String ket thuc bang EOF" """ 
        output = """String ket thuc bang EOF,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,58))
    def test_59(self):
        """Created automatically"""
        input = """ "abc\n """ 
        output = """Unclosed String: abc\n """
        self.assertTrue(TestLexer.checkLexeme(input,output,59))
    def test_60(self):
        """Created automatically"""
        input = """ "khok '" 1" "dong song~~~ EOF""" 
        output = """khok '" 1,Unclosed String: dong song~~~ EOF"""
        self.assertTrue(TestLexer.checkLexeme(input,output,60))
    def test_61(self):
        """Created automatically"""
        input = """ "" " """ 
        output = """,Unclosed String:  """
        self.assertTrue(TestLexer.checkLexeme(input,output,61))
    def test_62(self):
        """Created automatically"""
        input = """Function: assignment Body: str = "Hello World!!! Endbody.""" 
        output = """Function,:,assignment,Body,:,str,=,Unclosed String: Hello World!!! Endbody."""
        self.assertTrue(TestLexer.checkLexeme(input,output,62))
    def test_63(self):
        """Created automatically"""
        input = """ "8n[#F*`~.~+C_D""" 
        output = """Unclosed String: 8n[#F*`~.~+C_D"""
        self.assertTrue(TestLexer.checkLexeme(input,output,63))
    def test_64(self):
        """Created automatically"""
        input = """tu1 1a` le^ trun9 son!!!""" 
        output = """tu1,1,a,Error Token `"""
        self.assertTrue(TestLexer.checkLexeme(input,output,64))
    def test_65(self):
        """Created automatically"""
        input = """Var""" 
        output = """Var,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,65))
    def test_66(self):
        """Created automatically"""
        input = """day la 1 test""" 
        output = """day,la,1,test,<EOF>"""
        self.assertTrue(TestLexer.checkLexeme(input,output,66))